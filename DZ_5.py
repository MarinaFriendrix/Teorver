# Задача 1. Когда используется критерий Стьюдента, а когда Z –критерий?
# Z: нормальное распределение ген. совокупности, известно ско ген. совокупности, одна выборка.
# t: нормальное распределение геню совокупности, не известно ско ген. совокупности, две выборки.

# Задача 2. Проведите тест гипотезы. Утверждается, что шарики для подшипников, изготовленные
# автоматическим станком, имеют средний диаметр 17 мм.
# Используя односторонний критерий с α=0,05, проверить эту гипотезу, если в выборке из
# n=100 шариков средний диаметр
# оказался равным 17.5 мм, а дисперсия известна и равна 4 кв. мм.
import math
import scipy.stats as stats
import numpy as np
import pandas as pd

# Н0: mu0 = 17
# H1: mu0 > 17
# alfa = 0.05
# std = 2
# mu0 = 17
# x = 17.5
# n= 100

# z= (x-mu0)/(std/math.sqrt(n)) 
# print (z)
# z1 = stats.norm.ppf((1-alfa))
# print (z1)
# z > z1  H0 отвергается.

# Задача 3. Проведите тест гипотезы. Продавец утверждает, что средний вес пачки печенья
# составляет 200 г.
# Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
# 202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
# Известно, что их веса распределены нормально.
# Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна
# 99%? (Провести двусторонний тест.)

# H0: mu0 =200
# H1: mu0 != 200

# alfa = 0.01
# mu0 = 200
# x = np.array([202, 203, 199, 197, 195, 201, 200, 204, 194, 190])
# x_mean = np.mean(x)
# x_v = np.var(x, ddof=1)
# n = 10

# print(x_mean, x_v)

# tn = (x_mean -mu0)/(x_v/math.sqrt(n))

# t1 = stats.t.ppf(alfa/2, df=n-1)
# t2 = stats.t.ppf((1-alfa/2), df=n-1)

# print (tn,t1,t2)
# # t1<tn<t2, H0 не отвергается

# Задача 4. Есть ли статистически значимые различия в росте
# дочерей?
# Рост матерей 172, 177, 158, 170, 178,175, 164, 160, 169, 165
# Рост взрослых дочерей: 173, 175, 162, 174, 175, 168, 155, 170, 160, 163
# H0: mux = muy
# H1: mux != muy

# alfa = 0.05
x = np.array([172, 177, 158, 170, 178,175, 164, 160, 169, 165])
y = np.array([173, 175, 162, 174, 175, 168, 155, 170, 160, 163])
# x_mean = np.mean(x)
# y_mean = np.mean(y)
# x_v = np.var(x, ddof =1)
# y_v = np.var(y, ddof = 1)
# n_x = len(x)
# n_y = len(y)
# print (x_mean, y_mean, x_v, y_v, n_x, n_y )

# t_emp = (x_mean - y_mean)/math.sqrt((x_v/n_x) + (y_v/n_y))
# print(t_emp)

# t1 = stats.t.ppf(alfa/2, df=2*(n_x -1))
# t2 = stats.t.ppf((1-alfa/2), df=2*(n_x -1))

# print (t1, t2)
# # H0 не отвергается. Статистически значимых различий нет.

p_v = stats.ttest_ind (x,y)
print (p_v)

