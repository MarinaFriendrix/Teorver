import math
def combinations (n,k):
    comb = math.factorial(n) / (math.factorial(k) * math.factorial(n-k))
    return (comb)

def bernuli (n,p,k):
    bern = combinations(n,k)*pow(p,k)*pow((1-p),(n-k))
    return (bern)


# Задача 1. Вероятность того, что стрелок попадет в мишень, выстрелив один раз, равна 0.8. 
# Стрелок выстрелил 100 раз. Найдите вероятность того, что стрелок попадет в цель ровно 85 раз.

# p=bernuli(100,0.8,85 )
# print ("{:.2%}".format(p))

# Задача.2 Вероятность того, что лампочка перегорит в течение первого дня эксплуатации, равна 0.0004. 
# В жилом комплексе после ремонта в один день включили 5000 новых лампочек. 
# Какова вероятность, что ни одна из них не перегорит в первый день?

n=5000
m1=0
m2=2
p=0.004

la=p*n
print (la)

p1= pow(la,m1)/math.factorial(m1)*math.exp(-la)

print (p1)
 
# Какова вероятность, что перегорят ровно две?

p2= pow(la,m1)/math.factorial(m1)*math.exp(-la)
print (p2)

# Задача 3. Монету подбросили 144 раза. 
# Какова вероятность, что орел выпадет ровно 70 раз?

# p=bernuli(100, 0.5, 70)
# print ("{:%}".format(p))


